// use the following helper functions in your solutionfunction each(coll, f) {	if (Array.isArray(coll)) {		for (var i = 0; i < coll.length; i++) {			f(coll[i], i);		}	} else {		for (var key in coll) {			f(coll[key], key);		}	}}function filter(array, predicate) {	var acc = [];	each(array, function(element, i) {		if (predicate(element, i)) {			acc.push(element);		}	});	return acc;}function map(array, func) {	var acc = [];	each(array, function(element, i) {		acc.push(func(element, i));	});	return acc;}  // Remember to relax :)//=======================================================================/*                                  Q1                                 *///=======================================================================//Depending on data modeling concept that you have learned:// create a factory function called makeComputer that represents computers,// what different attributes computers may have? create two computers object from your factory function and save them in one array called computers!// Note: please write one or two lines here describing your solution.//This function called make computer when called with (Name,Price and storage of a computer as inputs) it returns an object with the inputs as values;function makeComputer(name,price,storage,ram,color) {    return computer = {		Name : name,		Price : price,		Storage : storage,		RAM : ram,		Color : color	};}// write function displayComputer that can be used to display one computer.//This function when give an array of computers and a key word which is the name of the computer it will go through the elements of the array and element by element (which are objects) it will go through all the Values of the object until it finds the computer that needs to be shown and it assigns it to an object.var computer=[{Name: 'HP', Price: '1499DT', Storage: '500Go', RAM: '8Go', Color: 'Black'},{Name: 'LENOVO', Price: '2999DT', Storage: '1TO', RAM: '16Go', Color: 'Blue'}]function displayComputer(computer,name) {	var obj={};	for(var i=0;i<computer.length;i++){    	each(computer[i], function(value, key) {    		if(name === computer[i][key]){    		obj=computer[i];    		}    	})	}	return obj;}//=============================================================================/*                                  Q2                                       *///=============================================================================//Write a function that takes an array of strings as a input,and returns an array //of all of those strings, but transformed to upper case. //You can use toUpperCase method to convert a string to upper case.//solve it using the most appropriate helper functions(each,map,filter).// Note: please write one or two lines here describing your solution.var strArr = ['hello', 'world', 'whirled', 'peas'];// uppercaseAll(strArr); ==> [ 'HELLO', 'WORLD', 'WHIRLED', 'PEAS' ]//This function when give an array of strings it go through all of the elements of the array using map and return every element.toUpperCase() function uppercaseAll(arrayOfStrings) {    return map(arrayOfStrings, function(element, i) {    	return element.toUpperCase();    }) }//=============================================================================/*                                  Q3                                       *///=============================================================================//write a function that takes array of objects  as an input and returns an array//with only the countries that have a population higher than 500 million.//solve it using one of the most appropriate helperthe helpers functions(each,map,filter).//Here’s the data you’ll work with:var data = [{	country: 'China',	population: 1409517397,},{	country: 'India',	population: 1339180127,},{	country: 'USA',	population: 324459463,},{	country: 'Indonesia',	population: 263991379,}];// highestPopulation(data); ==> [{country: "China", population: 1409517397},{country: "India", population: 1339180127}]// Note: please write one or two lines here describing your solution.//this function when given an array of objects it will go through all the elements of the array and will return only the elements(objects) with population higher than 500Millionfunction highestPopulation(arrayOfObjects) {	return filter(arrayOfObjects, function(element) {			return (element.population>500000000);		});}//=============================================================================/*                              Q4                                           *///=============================================================================//Write a function halveAll that takes an array of numbers as a input and returns an array// of all of those numbers halved (divided by two).//Note: solve it using the most appropriate helper functions(each,map,filter)// var numsArray = [2, 6, 20, 8, 14];// halveAll(numsArray); ==> [ 1, 3, 10, 4, 7 ]// Note: please write one or two lines here describing your solution.//This function when given an array of numbers, it goes through all the elements of the array and divides them by two and  it returns a new array of all the numbers divided by twofunction halveAll(numbers) {	return map(numbers, function(element, i) {		return element/2;	})}//=============================================================================/*                                  Q5                                       *///=============================================================================//write a function called values that accepts an object as a parameter, and outputs an array of the object's values.//solve it using one of the most appropriate helpers functions(each,map,filter).// values({first : 5, second: 'something' , third : 129}) ==> [5, 'something', 129]; // Note: please write one or two lines here describing your solution.//this function when given an objects it goes through all the KEY/Value pairs and it pushes all the values in an array then returns the array function values(obj) { 	var arr=[]; 	each(obj, function(value, key) { 		arr.push(obj[key]); 	}) 	return arr; } 							//Good Luck :))